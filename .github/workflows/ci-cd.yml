name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Quality Assurance
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for security vulnerabilities
        run: npm audit --audit-level=moderate

      - name: Type checking
        run: npm run typecheck

      - name: Linting
        run: npm run lint

      - name: Format checking
        run: npm run format:check

      - name: Run tests
        run: npm run test:ci

      - name: Test Firebase Rules
        run: npm run test:firebase
        env:
          FIREBASE_PROJECT_ID: test-project

      - name: Validate Dify API Connection
        run: npm run test:dify
        env:
          DIFY_API_KEY: ${{ secrets.DIFY_TEST_API_KEY }}
          DIFY_BASE_URL: https://api.dify.ai/v1

      - name: Build application
        run: npm run build
        env:
          # Mock environment variables for build
          NEXT_PUBLIC_FIREBASE_API_KEY: mock_key
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: mock.firebaseapp.com
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: mock_project
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: mock.appspot.com
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: mock_sender
          NEXT_PUBLIC_FIREBASE_APP_ID: mock_app
          NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID: G-MOCK
          NEXT_PUBLIC_SUPPORT_EMAIL: support@mock.com
          FIREBASE_PROJECT_ID: mock_project
          FIREBASE_CLIENT_EMAIL: mock@mock.iam.gserviceaccount.com
          FIREBASE_PRIVATE_KEY: "-----BEGIN PRIVATE KEY-----\nMOCK\n-----END PRIVATE KEY-----"
          DIFY_API_KEY: mock_dify_key
          DIFY_BASE_URL: https://api.dify.ai/v1

      - name: Check bundle size
        run: |
          echo "ðŸ“¦ Bundle size analysis:"
          du -sh .next/static/chunks/* | sort -hr | head -5
          echo "âœ… Build completed successfully"

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Development (develop branch)
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [quality, security]
    if: github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Development)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--target=development'
          working-directory: ./

  # Deploy Preview (Pull Requests)
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [quality, security]
    if: github.event_name == 'pull_request'
    environment: preview
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Preview)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--target=preview'
          working-directory: ./

      - name: Comment PR with Preview URL
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('Preview deployment')
            );

            const previewUrl = process.env.VERCEL_URL || 'https://your-preview-url.vercel.app';

            const commentBody = `## ðŸš€ Preview Deployment Ready!

            **Preview URL:** ${previewUrl}

            This preview deployment includes all changes from this PR and is ready for testing.

            ### Environment Details:
            - **Branch:** ${context.payload.pull_request.head.ref}
            - **Commit:** ${context.payload.pull_request.head.sha.substring(0, 7)}
            - **Environment:** Preview
            - **Build Status:** âœ… Success`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }

  # Deploy to Production (main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality, security]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://${{ secrets.VERCEL_PROJECT_URL }}
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Notify Deployment Success
        uses: actions/github-script@v7
        with:
          script: |
            const productionUrl = process.env.VERCEL_URL || 'https://your-production-url.vercel.app';

            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `## ðŸŽ‰ Production Deployment Successful!
              
              **Production URL:** ${productionUrl}
              
              Deployment completed successfully and is now live in production.
              
              ### Deployment Details:
              - **Environment:** Production
              - **Branch:** ${context.ref.replace('refs/heads/', '')}
              - **Commit:** ${context.sha.substring(0, 7)}
              - **Build Status:** âœ… Success`
            });

  # Semantic Release (main branch only)
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run semantic-release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
