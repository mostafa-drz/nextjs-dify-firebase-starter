---
alwaysApply: true
description: This defines our core principles in building software, always consider them
---

# Minimal Implementation Rule

## Core Principle

**Always ask "What is the most minimal standard thing I can implement?" before adding any feature or script.**

## Guidelines

- For any extra functionality, confirm with the user first
- Think minimal - that's the gateway to success
- Avoid creating multiple scripts when one simple solution will do
- Prefer inline solutions over separate files when possible

## Examples

- ✅ **Good**: One simple script `dev:clean` that clears caches, installs deps, and starts dev
- ❌ **Bad**: Multiple separate scripts for cleaning, fresh installs, cache clearing, etc.

## Implementation Checklist

Before implementing anything:

1. What is the most minimal standard approach?
2. Can this be done with existing tools/scripts?
3. Do I need to ask the user before adding extra features?
4. Is this the simplest solution that works?

## Human-in-the-Loop Principle

**When investigations take longer than 1 minute, ask the developer for clarification and guidance.**

### Guidelines

- If initial debugging/investigation exceeds reasonable time, pause and ask for help
- Share findings and ask: "Should I continue investigating or would you prefer to guide me?"
- Don't assume - ask for clarification on expected behavior vs actual behavior
- Prioritize developer time over exhaustive automated investigation

### Examples

- ✅ **Good**: "I've found X and Y issues. Should I continue investigating Z or would you like to point me in a specific direction?"
- ❌ **Bad**: Spending 20+ minutes on deep investigation without checking if the approach is right

## Remember

**Minimal. Standard. Done.**

## Read the existing patterns before you write new code.

### Process:

- Map existing architecture (actions → hooks → components)
- Search for existing implementations
- Follow established patterns, don't create new ones
- Key Question: "How would this be done here?" not "How should this be done?"
- Bottom Line: Context consistency > Code elegance
