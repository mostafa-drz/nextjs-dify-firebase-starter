---
alwaysApply: false
description: Next.js server/client separation and Firebase architecture guidelines
---

# üèóÔ∏è Architecture Rules

## Next.js 15 Server/Client Separation

- **Server Components**: Default, no directive, access all env vars, data fetching
- **Client Components**: Must have `'use client'`, only `NEXT_PUBLIC_*` vars, interactivity
- **Never mix** server and client functionality in same component

## Firebase Client-Side Operations Priority

**Firebase best practice**: Leverage Client SDK to reduce latency, improve performance, and easier to secure.

- **Use Firebase Client-Side For**: User data operations, real-time data, offline support, authentication, file uploads
- **Use Server Actions For**: External API calls, sensitive operations, complex business logic, operations requiring server-side secrets

## Environment Variables

- **Client-safe**: `NEXT_PUBLIC_*` (Firebase config, public URLs)
- **Server-only**: `API_KEY`, `SECRET`, `PRIVATE_KEY`, `TOKEN`
- **Note**: Server components can't access `NEXT_PUBLIC_*` vars, client components can't access server-only vars

## Provider Architecture (CRITICAL)

**Provider placement is critical for SSR/client-side hydration:**

- **Root Layout (`src/app/layout.tsx`)**: Server-side only
  - ‚úÖ Error boundaries, HTML structure, fonts, metadata
  - ‚ùå NEVER put `'use client'` components here
  - ‚ùå NEVER put components using client hooks (`usePathname`, `useState`, etc.)

- **ClientProviders (`src/components/providers/ClientProviders.tsx`)**: Client-side only
  - ‚úÖ All `'use client'` components
  - ‚úÖ Components using client hooks (`usePathname`, `useState`, `useEffect`)
  - ‚úÖ Firebase providers, analytics, internationalization
  - ‚úÖ Any component that needs browser APIs

**Common mistakes that cause hydration errors:**

- Putting `FirebaseProvider` (has `'use client'`) in root layout
- Putting `NextIntlClientProvider` in root layout instead of ClientProviders
- Putting `AnalyticsProvider` (uses `usePathname`) in root layout
- Forgetting to pass `locale` prop to `NextIntlClientProvider` when moved to client-side
- Using `localePrefix: 'as-needed'` means default locale (`en`) doesn't appear in URLs
- Root page should redirect to `/chat`, not `/${defaultLocale}/chat`

## File Organization

- **Server Actions**: `src/lib/actions/[service]-[operation].ts`
- **Client Hooks**: `src/lib/hooks/` - call server actions, never direct API calls
