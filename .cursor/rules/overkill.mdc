---
alwaysApply: false
description: Patterns to avoid over-engineering and keep code simple
---

# üö´ Overkill Patterns to Avoid

## Examples of Overkill:

```typescript
// ‚ùå Firebase Singleton Pattern (Overkill)
class FirebaseSingleton {
  private static instance: FirebaseSingleton | null = null;
  // ... 200+ lines of unnecessary complexity
}

// ‚úÖ Simple Firebase setup
const app = getApps().length === 0 ? initializeApp(config) : getApp();
export const auth = getAuth(app);
export const db = getFirestore(app);
```

## Keep It Simple:

- **Direct imports** over dependency injection
- **Environment variables** over complex config management
- **Built-in Firebase methods** over custom wrappers
- **Simple error handling** over complex error hierarchies
- **Essential tests** over exhaustive test coverage

## MVP Focus:

- **Only add code that is absolutely necessary** for the MVP
- **Avoid bulletproofing** - don't add extra safety layers unless critical
- **Focus on 10k Dify AI integration** - anything beyond this scope is overkill
- **Extra code is not appreciated** - keep the boilerplate minimal and focused

**Remember**: The best code is the code you don't have to write! This is an MVP boilerplate, not a production enterprise system.
